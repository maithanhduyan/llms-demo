// Generated by Copilot
// Learning rate policies for neural networks

pub enum RatePolicy {
    Fixed,
    Step { gamma: f64, step_size: u32 },
    Exp { gamma: f64 },
    Inv { gamma: f64, power: f64 },
}

impl RatePolicy {
    pub fn get_rate(&self, base_rate: f64, iteration: u32) -> f64 {
        match self {
            RatePolicy::Fixed => base_rate,
            RatePolicy::Step { gamma, step_size } => {
                base_rate * gamma.powf((iteration as f64 / *step_size as f64).floor())
            }
            RatePolicy::Exp { gamma } => base_rate * gamma.powf(iteration as f64),
            RatePolicy::Inv { gamma, power } => {
                base_rate * (1.0 + gamma * iteration as f64).powf(-power)
            }
        }
    }
}
